{% extends 'Header.html.twig' %}
{% block title %}
    Create test implementation Johnson Algorithm
{% endblock %}

{% block javascripts %}
    <script>
        function copyText() {
            // You may need to modify the file path based on your setup
            var filePath = 'clipboard.txt';

            // Use XMLHttpRequest to read the file content
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var textToCopy = xhr.responseText;

                    // Create a temporary textarea to hold the text
                    var textarea = document.createElement('textarea');
                    textarea.value = textToCopy;
                    document.body.appendChild(textarea);

                    // Select and copy the text
                    textarea.select();
                    document.execCommand('copy');

                    // Remove the temporary textarea
                    document.body.removeChild(textarea);

                    alert('Text copied to clipboard!');
                }
            };
            xhr.open('GET', filePath, true);
            xhr.send();
        }
    </script>
{% endblock %}

{% block body %}
    <div id="mid-container">
        <h3>Task</h3>
        <p>Implement the <b>Johnson</b> algorithm based on the code below:</p>
        <pre class="code-block">
            <code class="fa-python">

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination, weight):
        if source not in self.graph:
            self.graph[source] = []
        self.graph[source].append((destination, weight))

def johnson(graph: Graph):
# Your algorithm implementation
# If there are any exceptions (Graph contains negative-weight cycle etc.), return an empty dictionary.

if __name__ == '__main__':
    # Example usage:
    graph = Graph()
    graph.add_edge(1, 2, -1)
    graph.add_edge(2, 3, -2)
    graph.add_edge(3, 1, 4)
    graph.add_edge(1, 4, 2)
    graph.add_edge(4, 3, 5)
    graph.add_edge(2, 4, 2)
    graph.add_edge(5, 6, 10)

    result = johnson(graph)
    print(result)
    # Result for this main:
    # {1: {1: 0, 2: -1, 3: -3, 4: 1}, 2: {1: 2, 2: 0, 3: -2, 4: 2}, 3: {1: 4, 2: 3, 3: 0, 4: 5}, 4: {1: 9, 2: 8, 3: 5, 4: 0}, 5: {5: 0, 6: 10}}

            </code>
        </pre>
        <h6>Copy Code to Clipboard</h6>
        <button class="btn-primary btn" onclick="copyText()">Copy Text</button>
    </div>
    <hr>
    <div id="mid-container">
        <h2>Testing</h2>
        <h5>Upload a file with your algorithm implementation</h5>
        {{ form(form) }}
    </div>
{% endblock %}