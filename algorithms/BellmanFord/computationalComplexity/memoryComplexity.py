import tracemalloc


class Graph:
    def __init__(self):
        self.graph = {
            1: [(2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            2: [(1, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            3: [(1, 20), (2, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            4: [(1, 20), (2, 20), (3, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            5: [(1, 20), (2, 20), (3, 20), (4, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            6: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            7: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            8: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (9, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            9: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (10, 20), (11, 20), (12, 20),
                (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            10: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (11, 20), (12, 20),
                 (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            11: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (12, 20),
                 (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            12: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            13: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            14: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            15: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (16, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            16: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (15, 20), (17, 20), (18, 20), (19, 20), (20, 20)],
            17: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (15, 20), (16, 20), (18, 20), (19, 20), (20, 20)],
            18: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (19, 20), (20, 20)],
            19: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (20, 20)],
            20: [(1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20),
                 (12, 20), (13, 20), (14, 20), (15, 20), (16, 20), (17, 20), (18, 20), (19, 20)]}


def bellman_ford(graph: Graph, start_vertex: int) -> {}:
    distances = {vertex: float('infinity') for vertex in graph.graph}
    distances[start_vertex] = 0

    for _ in range(len(graph.graph) - 1):
        for current_vertex in graph.graph:
            if current_vertex in distances:
                for neighbor, weight in graph.graph[current_vertex]:
                    if distances[current_vertex] + weight < distances.get(neighbor, float('infinity')):
                        distances[neighbor] = distances[current_vertex] + weight

    for current_vertex in graph.graph:
        if current_vertex in distances:
            for neighbor, weight in graph.graph[current_vertex]:
                if distances[current_vertex] + weight < distances[neighbor]:
                    return {}

    return distances


if __name__ == '__main__':
    graph = Graph()
    tracemalloc.start()
    bellman_ford(graph, list(graph.graph.keys())[0])
    peekTracedMemory = int(tracemalloc.get_traced_memory()[1])
    tracemalloc.stop()
    print(peekTracedMemory)