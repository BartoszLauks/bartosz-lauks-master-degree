import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_vertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def add_edge(self, source, destination, weight):
        self.add_vertex(source)
        self.add_vertex(destination)
        self.graph[source].append((destination, weight))
        self.graph[destination].append((source, weight))


def dijkstra(graph: Graph, start):
# Your algorithm implementation

if __name__ == '__main__':
    graph = Graph()

    graph.add_edge(1, 2, 1)
    graph.add_edge(1, 3, 4)
    graph.add_edge(2, 3, 2)
    graph.add_edge(2, 4, 5)
    graph.add_edge(3, 4, 1)
    graph.add_edge(4, 1, 7)

    start_vertex = 1
    result = dijkstra(graph, start_vertex)
    print(graph.graph)
    print(f"Shortest distances from {start_vertex}: {result}")
    # Result for this main:
    # {1: [(2, 1), (3, 4), (4, 7)], 2: [(1, 1), (3, 2), (4, 5)], 3: [(1, 4), (2, 2), (4, 1)], 4: [(2, 5), (3, 1), (1, 7)]}
    # Shortest distances from 1: {1: 0, 2: 1, 3: 3, 4: 4}
