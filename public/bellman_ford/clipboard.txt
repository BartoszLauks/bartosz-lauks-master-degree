class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination, weight):
        if source not in self.graph:
            self.graph[source] = []
        self.graph[source].append((destination, weight))


def bellman_ford(graph: Graph, start_vertex: int) -> {}:
# Your algorithm implementation
# If there are any exceptions (Graph contains negative-weight cycle etc.), return an empty dictionary.


# Example usage:
if __name__ == '__main__':
    g = Graph()
    g.add_edge(1, 2, 1)
    g.add_edge(1, 3, 4)
    g.add_edge(2, 3, -2)
    g.add_edge(2, 4, 3)
    g.add_edge(3, 4, 1)
    g.add_edge(4, 5, 2)

    start_vertex = 1
    result = bellman_ford(g, start_vertex)
    print(result)
    # Result for this main:
    # {1: 0, 2: 1, 3: -1, 4: 0, 5: 2}
