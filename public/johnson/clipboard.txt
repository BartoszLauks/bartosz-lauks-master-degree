import sys

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination, weight):
        if source not in self.graph:
            self.graph[source] = []
        self.graph[source].append((destination, weight))

def johnson(graph: Graph):
# Your algorithm implementation
# If there are any exceptions (Graph contains negative-weight cycle etc.), return an empty dictionary.

if __name__ == '__main__':
    # Example usage:
    graph = Graph()
    graph.add_edge(1, 2, -1)
    graph.add_edge(2, 3, -2)
    graph.add_edge(3, 1, 4)
    graph.add_edge(1, 4, 2)
    graph.add_edge(4, 3, 5)
    graph.add_edge(2, 4, 2)
    graph.add_edge(5, 6, 10)

    result = johnson(graph)
    print(result)
    # Result for this main:
    # {1: {1: 0, 2: -1, 3: -3, 4: 1}, 2: {1: 2, 2: 0, 3: -2, 4: 2}, 3: {1: 4, 2: 3, 3: 0, 4: 5}, 4: {1: 9, 2: 8, 3: 5, 4: 0}, 5: {5: 0, 6: 10}}
