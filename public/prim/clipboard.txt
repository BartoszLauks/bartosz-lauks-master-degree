import heapq


class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination, weight):
        if source not in self.graph:
            self.graph[source] = []
        if destination not in self.graph:
            self.graph[destination] = []

        self.graph[source].append((destination, weight))
        self.graph[destination].append((source, weight))


def prim(graph: Graph, start_vertex) -> []:
# Your algorithm implementation

if __name__ == '__main__':
    g = Graph()
    g.add_edge(0, 1, 4)
    g.add_edge(0, 3, 5)
    g.add_edge(1, 3, 2)
    g.add_edge(1, 3, 10)
    g.add_edge(4, 3, 7)

    minimum_spanning_tree = prim(g, 0)

    print("Minimum Spanning Tree:")
    for edge in minimum_spanning_tree:
        print(edge)
    # Result for this main:
    # Minimum Spanning Tree:
    # (0, 1, 4)
    # (1, 3, 2)
    # (3, 4, 7)

