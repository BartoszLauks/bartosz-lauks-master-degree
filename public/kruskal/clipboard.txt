class Graph:
    def __init__(self):
        self.graph = []

    def add_edge(self, source, destination, weight):
        self.graph.append((source, destination, weight))


def kruskal(graph: Graph):
# Your algorithm implementation


if __name__ == '__main__':
    g = Graph()
    g.add_edge(0, 1, 10)
    g.add_edge(0, 2, 6)
    g.add_edge(0, 3, 5)
    g.add_edge(1, 3, 15)
    g.add_edge(2, 3, 4)

    minimum_spanning_tree = kruskal(g)
    print(minimum_spanning_tree)
    print("Minimum Spanning Tree:")
    for edge in minimum_spanning_tree:
        print(f"Edge: {edge[0]} - {edge[1]}, Weight: {edge[2]}")
    # Result for this main:
    # [(2, 3, 4), (0, 3, 5), (0, 1, 10)]
    # Minimum Spanning Tree:
    # Edge: 2 - 3, Weight: 4
    # Edge: 0 - 3, Weight: 5
    # Edge: 0 - 1, Weight: 10

