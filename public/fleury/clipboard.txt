class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination):
        self.graph.setdefault(source, []).append(destination)
        self.graph.setdefault(destination, []).append(source)

def fleury(graph):
# Your algorithm implementation
# If there are any exceptions (Graph contains negative-weight cycle etc.), return an empty dictionary.

if __name__ == "__main__":
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(1, 3)
    g.add_edge(3, 4)
    g.add_edge(4, 1)

    eulerian_circuit = fleury(g)
    print("Eulerian Circuit:", eulerian_circuit)
    # Result for this main:
    # Eulerian Circuit: [(0, 1), (1, 2), (2, 0)]
