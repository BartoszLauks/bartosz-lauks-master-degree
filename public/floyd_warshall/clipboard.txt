class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, source, destination, weight):
        if source not in self.graph:
            self.graph[source] = {}
        self.graph[source][destination] = weight


def floyd_warshall(graph: Graph, start_edge: int) -> {}:
# Your algorithm implementation


if __name__ == '__main__':
    # Example usage:
    graph = Graph()
    graph.add_edge(1, 2, 1)
    graph.add_edge(1, 3, 4)
    graph.add_edge(2, 3, 2)
    graph.add_edge(2, 4, 5)
    graph.add_edge(3, 4, 1)
    graph.add_edge(4, 1, 3)
    graph.add_edge(5, 6, 10)

    start_edge = 1
    result = floyd_warshall(graph, list(graph.graph.keys())[0])
    print(f"Shortest distances from {start_edge}: {result}")
    # Result for this main:
    # RShortest distances from 1: {1: 0, 2: 1, 3: 3, 4: 4}
